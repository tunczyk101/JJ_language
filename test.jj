// Parser: ANTLR
// ------------------------------------------------------------------------------------------------
// Głównym konceptem języka jest zachowanie "Single exit-point rule". 
// Generalnie zazwyczaj w językach strukturalnych stosowanie sie do tej regóły moze byc problematyczne
// 
// W C:
// int f(int* x) {                                      |    |  int f(int* x) {    
//     if (x == NULL) return -1;                        |    |      int ret;
//     // ... pozostałe obliczenia gdy x nie jest NULL  | VS |      if (x == NULL) ret = -1;
//     return g(h);                                     |    |      else { ... }
// }                                                    |    |      return ret; 
//                                                      |    |  }
// 
// ale chcieliśmy znaleść takie połączenie które pozwoli zachować strukturalność kodu, czytelnośc i pozowoli stosować zasade SEP.
// Dlatego zdecydowaliśmy się użyć konceptu znanego z programowania funkcyjnego - Function Guards znanych z np: Haskella czy Elixira
// ------------------------------------------------------------------------------------------------











func fib
with x 
returns fib(x-1) + fib(x-2)    // rekurencja

func fib
with x
when x == 0 // GUARDY na funkcje
returns 0 // Single exit point

func fib
with x
when x == 1
returns 1

func func_with_flows
{
    let xd { 123 }; 
    if( xd > 10 )
    {
        println(xd); 
    }

    mut let mutable_var { 1 }; 
    while( mutable_var < 10 * xd ) 
    {
        mutable_var = mutable_var * xd;
    }

    for( mut let i = 0; i < 0; i = i + 1 )
    {
        mutable_var = mutable_var - xd;
    }
}

func logic
{
    mut let x { true };
    x = !x;
    x = x && (x || !false);
}
returns x

func main  // <<-- ENTRY_POINT
{
    let x { 10 }; 
    mut let y { 100 }; 

    println( fib(y) );

    // x = 12 - error bo const
    // y = 12 - ok bo mutable
} 
returns fib(x)

func types 
{
    let a { 10 };   // INT
    let b { 1.0 };  // FLOAT
    let c { true }; // BOOL
} 

func g
with x
{
    ley y { fib(x) };
    let z { y * 2};
}
returns z
