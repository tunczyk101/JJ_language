// Parser: ANTLR

func fib
with x 
returns fib(x-1) + fib(x-2)    // w wymaganiach jst rekurencja

func fib
with x
when x == 0 // jedyny ficzer jezyka zeby sie nie przyjebal GUARDY na funkcje
returns 0 // Single exit point zeby sie czyms wyroznial jezyk a raczej jest ez do zrobienia

func fib
with x
when x == 1
returns 1

func fib 
with x
when x == 1 || x == 0 // wykonywane proirytetowo bo jest ostatnie wiec przyslania te gorne
returns 123 

func func_with_flows
{
    let xd { 123 }; 
    if( xd > 10 )
    {
        println(xd); 
    }

    mut let mutable_var { 0 }; 
    while( mutable_var < 10 * xd ) 
    {
        mutable_var = mutable_var * xd;
    }

    for( mut let i = 0; i < 0; i = i + 1 )
    {
        mutable_var = mutable_var - xd;
    }
}

func logic
{
    mut let x { true };
    x = !x;
    x = x && (x || !false);
}
returns x

func main  // <<-- ENTRY_POINT
{
    let x { 10 }; 
    mut let y { 100 }; 

    println( fib(y) );

    // x = 12 - error bo const
    // y = 12 - git bo mutable (zajebane z rust xD)
} 
returns fib(x)

func types 
{
    let a { 10 };   // INT
    let b { 1.0 };  // FLOAT
    let c { true }; // BOOL
} 
