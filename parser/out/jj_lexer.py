# Generated from jj_lexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,214,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,3,9,104,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,5,18,148,8,18,10,18,12,18,
        151,9,18,1,19,4,19,154,8,19,11,19,12,19,155,1,19,1,19,1,20,3,20,
        161,8,20,1,20,1,20,3,20,165,8,20,1,20,3,20,168,8,20,1,21,1,21,5,
        21,172,8,21,10,21,12,21,175,9,21,1,22,3,22,178,8,22,1,23,1,23,3,
        23,182,8,23,1,24,3,24,185,8,24,1,24,1,24,3,24,189,8,24,1,25,1,25,
        1,26,1,26,1,27,4,27,196,8,27,11,27,12,27,197,1,28,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,213,8,29,0,0,30,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,1,0,7,4,0,37,37,42,43,45,45,
        47,47,2,0,60,60,62,62,2,0,10,10,12,13,2,0,9,9,32,32,3,0,65,90,95,
        95,97,122,1,0,48,57,2,0,43,43,45,45,231,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,66,1,0,0,0,5,
        71,1,0,0,0,7,75,1,0,0,0,9,79,1,0,0,0,11,81,1,0,0,0,13,83,1,0,0,0,
        15,85,1,0,0,0,17,87,1,0,0,0,19,103,1,0,0,0,21,105,1,0,0,0,23,113,
        1,0,0,0,25,118,1,0,0,0,27,124,1,0,0,0,29,127,1,0,0,0,31,132,1,0,
        0,0,33,138,1,0,0,0,35,142,1,0,0,0,37,145,1,0,0,0,39,153,1,0,0,0,
        41,164,1,0,0,0,43,169,1,0,0,0,45,177,1,0,0,0,47,181,1,0,0,0,49,184,
        1,0,0,0,51,190,1,0,0,0,53,192,1,0,0,0,55,195,1,0,0,0,57,199,1,0,
        0,0,59,212,1,0,0,0,61,62,5,102,0,0,62,63,5,117,0,0,63,64,5,110,0,
        0,64,65,5,99,0,0,65,2,1,0,0,0,66,67,5,109,0,0,67,68,5,97,0,0,68,
        69,5,105,0,0,69,70,5,110,0,0,70,4,1,0,0,0,71,72,5,108,0,0,72,73,
        5,101,0,0,73,74,5,116,0,0,74,6,1,0,0,0,75,76,5,109,0,0,76,77,5,117,
        0,0,77,78,5,116,0,0,78,8,1,0,0,0,79,80,5,59,0,0,80,10,1,0,0,0,81,
        82,5,123,0,0,82,12,1,0,0,0,83,84,5,125,0,0,84,14,1,0,0,0,85,86,5,
        40,0,0,86,16,1,0,0,0,87,88,5,41,0,0,88,18,1,0,0,0,89,104,7,0,0,0,
        90,91,5,61,0,0,91,104,5,61,0,0,92,93,5,33,0,0,93,104,5,61,0,0,94,
        104,7,1,0,0,95,96,5,60,0,0,96,104,5,61,0,0,97,98,5,62,0,0,98,104,
        5,61,0,0,99,100,5,124,0,0,100,104,5,124,0,0,101,102,5,38,0,0,102,
        104,5,38,0,0,103,89,1,0,0,0,103,90,1,0,0,0,103,92,1,0,0,0,103,94,
        1,0,0,0,103,95,1,0,0,0,103,97,1,0,0,0,103,99,1,0,0,0,103,101,1,0,
        0,0,104,20,1,0,0,0,105,106,5,114,0,0,106,107,5,101,0,0,107,108,5,
        116,0,0,108,109,5,117,0,0,109,110,5,114,0,0,110,111,5,110,0,0,111,
        112,5,115,0,0,112,22,1,0,0,0,113,114,5,119,0,0,114,115,5,105,0,0,
        115,116,5,116,0,0,116,117,5,104,0,0,117,24,1,0,0,0,118,119,5,119,
        0,0,119,120,5,104,0,0,120,121,5,101,0,0,121,122,5,114,0,0,122,123,
        5,101,0,0,123,26,1,0,0,0,124,125,5,105,0,0,125,126,5,102,0,0,126,
        28,1,0,0,0,127,128,5,101,0,0,128,129,5,108,0,0,129,130,5,115,0,0,
        130,131,5,101,0,0,131,30,1,0,0,0,132,133,5,119,0,0,133,134,5,104,
        0,0,134,135,5,105,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,32,
        1,0,0,0,138,139,5,102,0,0,139,140,5,111,0,0,140,141,5,114,0,0,141,
        34,1,0,0,0,142,143,5,47,0,0,143,144,5,47,0,0,144,36,1,0,0,0,145,
        149,3,35,17,0,146,148,8,2,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,
        147,1,0,0,0,149,150,1,0,0,0,150,38,1,0,0,0,151,149,1,0,0,0,152,154,
        7,3,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,
        1,0,0,0,156,157,1,0,0,0,157,158,6,19,0,0,158,40,1,0,0,0,159,161,
        5,13,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,165,
        5,10,0,0,163,165,2,12,13,0,164,160,1,0,0,0,164,163,1,0,0,0,165,167,
        1,0,0,0,166,168,3,39,19,0,167,166,1,0,0,0,167,168,1,0,0,0,168,42,
        1,0,0,0,169,173,3,45,22,0,170,172,3,47,23,0,171,170,1,0,0,0,172,
        175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,44,1,0,0,0,175,173,
        1,0,0,0,176,178,7,4,0,0,177,176,1,0,0,0,178,46,1,0,0,0,179,182,3,
        45,22,0,180,182,7,5,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,48,1,
        0,0,0,183,185,3,51,25,0,184,183,1,0,0,0,184,185,1,0,0,0,185,188,
        1,0,0,0,186,189,3,55,27,0,187,189,3,57,28,0,188,186,1,0,0,0,188,
        187,1,0,0,0,189,50,1,0,0,0,190,191,7,6,0,0,191,52,1,0,0,0,192,193,
        7,5,0,0,193,54,1,0,0,0,194,196,3,53,26,0,195,194,1,0,0,0,196,197,
        1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,56,1,0,0,0,199,200,3,
        55,27,0,200,201,5,46,0,0,201,202,3,55,27,0,202,58,1,0,0,0,203,204,
        5,116,0,0,204,205,5,114,0,0,205,206,5,117,0,0,206,213,5,101,0,0,
        207,208,5,102,0,0,208,209,5,97,0,0,209,210,5,108,0,0,210,211,5,115,
        0,0,211,213,5,101,0,0,212,203,1,0,0,0,212,207,1,0,0,0,213,60,1,0,
        0,0,14,0,103,149,155,160,164,167,173,177,181,184,188,197,212,1,6,
        0,0
    ]

class jj_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FUNC_DECL = 1
    MAIN_FUNC_NAME = 2
    VARIABLE_TOKEN = 3
    MUTABLE_TOKEN = 4
    END_OF_INSTRUCTION = 5
    BLOCK_BEGIN = 6
    BLOCK_END = 7
    PARENTHESES_BEGIN = 8
    PARENTHESES_END = 9
    BIN_OPERATION_TOKEN = 10
    RETURN_DECL = 11
    WITH_DECL = 12
    WHERE_DECL = 13
    IF_DECL = 14
    ELSE_DECL = 15
    WHILE_DECL = 16
    FOR_DECL = 17
    COMMENT_START = 18
    COMMENT = 19
    WS = 20
    NEW_LINE = 21
    NAME = 22
    NAME_start = 23
    NAME_continue = 24
    NUMBER = 25
    NUMBER_SIGN = 26
    DIGIT = 27
    INT = 28
    FLOAT = 29
    BOOL = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'func'", "'main'", "'let'", "'mut'", "';'", "'{'", "'}'", "'('", 
            "')'", "'returns'", "'with'", "'where'", "'if'", "'else'", "'while'", 
            "'for'", "'//'" ]

    symbolicNames = [ "<INVALID>",
            "FUNC_DECL", "MAIN_FUNC_NAME", "VARIABLE_TOKEN", "MUTABLE_TOKEN", 
            "END_OF_INSTRUCTION", "BLOCK_BEGIN", "BLOCK_END", "PARENTHESES_BEGIN", 
            "PARENTHESES_END", "BIN_OPERATION_TOKEN", "RETURN_DECL", "WITH_DECL", 
            "WHERE_DECL", "IF_DECL", "ELSE_DECL", "WHILE_DECL", "FOR_DECL", 
            "COMMENT_START", "COMMENT", "WS", "NEW_LINE", "NAME", "NAME_start", 
            "NAME_continue", "NUMBER", "NUMBER_SIGN", "DIGIT", "INT", "FLOAT", 
            "BOOL" ]

    ruleNames = [ "FUNC_DECL", "MAIN_FUNC_NAME", "VARIABLE_TOKEN", "MUTABLE_TOKEN", 
                  "END_OF_INSTRUCTION", "BLOCK_BEGIN", "BLOCK_END", "PARENTHESES_BEGIN", 
                  "PARENTHESES_END", "BIN_OPERATION_TOKEN", "RETURN_DECL", 
                  "WITH_DECL", "WHERE_DECL", "IF_DECL", "ELSE_DECL", "WHILE_DECL", 
                  "FOR_DECL", "COMMENT_START", "COMMENT", "WS", "NEW_LINE", 
                  "NAME", "NAME_start", "NAME_continue", "NUMBER", "NUMBER_SIGN", 
                  "DIGIT", "INT", "FLOAT", "BOOL" ]

    grammarFileName = "jj_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


