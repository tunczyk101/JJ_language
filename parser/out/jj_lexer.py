# Generated from jj_lexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,94,8,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        5,13,114,8,13,10,13,12,13,117,9,13,1,14,4,14,120,8,14,11,14,12,14,
        121,1,14,1,14,1,15,3,15,127,8,15,1,15,1,15,3,15,131,8,15,1,15,3,
        15,134,8,15,1,16,1,16,5,16,138,8,16,10,16,12,16,141,9,16,1,17,3,
        17,144,8,17,1,18,1,18,3,18,148,8,18,1,19,3,19,151,8,19,1,19,1,19,
        3,19,155,8,19,1,20,1,20,1,21,1,21,1,22,4,22,162,8,22,11,22,12,22,
        163,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,3,24,179,8,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,1,0,7,4,0,37,37,42,43,45,45,47,
        47,2,0,60,60,62,62,2,0,10,10,12,13,2,0,9,9,32,32,3,0,65,90,95,95,
        97,122,1,0,48,57,2,0,43,43,45,45,197,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,56,1,0,0,0,5,61,1,
        0,0,0,7,65,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,1,0,0,0,15,75,
        1,0,0,0,17,77,1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,103,1,0,0,0,
        25,108,1,0,0,0,27,111,1,0,0,0,29,119,1,0,0,0,31,130,1,0,0,0,33,135,
        1,0,0,0,35,143,1,0,0,0,37,147,1,0,0,0,39,150,1,0,0,0,41,156,1,0,
        0,0,43,158,1,0,0,0,45,161,1,0,0,0,47,165,1,0,0,0,49,178,1,0,0,0,
        51,52,5,102,0,0,52,53,5,117,0,0,53,54,5,110,0,0,54,55,5,99,0,0,55,
        2,1,0,0,0,56,57,5,109,0,0,57,58,5,97,0,0,58,59,5,105,0,0,59,60,5,
        110,0,0,60,4,1,0,0,0,61,62,5,108,0,0,62,63,5,101,0,0,63,64,5,116,
        0,0,64,6,1,0,0,0,65,66,5,109,0,0,66,67,5,117,0,0,67,68,5,116,0,0,
        68,8,1,0,0,0,69,70,5,59,0,0,70,10,1,0,0,0,71,72,5,123,0,0,72,12,
        1,0,0,0,73,74,5,125,0,0,74,14,1,0,0,0,75,76,5,40,0,0,76,16,1,0,0,
        0,77,78,5,41,0,0,78,18,1,0,0,0,79,94,7,0,0,0,80,81,5,61,0,0,81,94,
        5,61,0,0,82,83,5,33,0,0,83,94,5,61,0,0,84,94,7,1,0,0,85,86,5,60,
        0,0,86,94,5,61,0,0,87,88,5,62,0,0,88,94,5,61,0,0,89,90,5,124,0,0,
        90,94,5,124,0,0,91,92,5,38,0,0,92,94,5,38,0,0,93,79,1,0,0,0,93,80,
        1,0,0,0,93,82,1,0,0,0,93,84,1,0,0,0,93,85,1,0,0,0,93,87,1,0,0,0,
        93,89,1,0,0,0,93,91,1,0,0,0,94,20,1,0,0,0,95,96,5,114,0,0,96,97,
        5,101,0,0,97,98,5,116,0,0,98,99,5,117,0,0,99,100,5,114,0,0,100,101,
        5,110,0,0,101,102,5,115,0,0,102,22,1,0,0,0,103,104,5,119,0,0,104,
        105,5,105,0,0,105,106,5,116,0,0,106,107,5,104,0,0,107,24,1,0,0,0,
        108,109,5,47,0,0,109,110,5,47,0,0,110,26,1,0,0,0,111,115,3,25,12,
        0,112,114,8,2,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,
        0,115,116,1,0,0,0,116,28,1,0,0,0,117,115,1,0,0,0,118,120,7,3,0,0,
        119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,
        122,123,1,0,0,0,123,124,6,14,0,0,124,30,1,0,0,0,125,127,5,13,0,0,
        126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,131,5,10,0,0,
        129,131,2,12,13,0,130,126,1,0,0,0,130,129,1,0,0,0,131,133,1,0,0,
        0,132,134,3,29,14,0,133,132,1,0,0,0,133,134,1,0,0,0,134,32,1,0,0,
        0,135,139,3,35,17,0,136,138,3,37,18,0,137,136,1,0,0,0,138,141,1,
        0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,34,1,0,0,0,141,139,1,0,
        0,0,142,144,7,4,0,0,143,142,1,0,0,0,144,36,1,0,0,0,145,148,3,35,
        17,0,146,148,7,5,0,0,147,145,1,0,0,0,147,146,1,0,0,0,148,38,1,0,
        0,0,149,151,3,41,20,0,150,149,1,0,0,0,150,151,1,0,0,0,151,154,1,
        0,0,0,152,155,3,45,22,0,153,155,3,47,23,0,154,152,1,0,0,0,154,153,
        1,0,0,0,155,40,1,0,0,0,156,157,7,6,0,0,157,42,1,0,0,0,158,159,7,
        5,0,0,159,44,1,0,0,0,160,162,3,43,21,0,161,160,1,0,0,0,162,163,1,
        0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,46,1,0,0,0,165,166,3,45,
        22,0,166,167,5,46,0,0,167,168,3,45,22,0,168,48,1,0,0,0,169,170,5,
        116,0,0,170,171,5,114,0,0,171,172,5,117,0,0,172,179,5,101,0,0,173,
        174,5,102,0,0,174,175,5,97,0,0,175,176,5,108,0,0,176,177,5,115,0,
        0,177,179,5,101,0,0,178,169,1,0,0,0,178,173,1,0,0,0,179,50,1,0,0,
        0,14,0,93,115,121,126,130,133,139,143,147,150,154,163,178,1,6,0,
        0
    ]

class jj_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FUNC_DECL = 1
    MAIN_FUNC_NAME = 2
    VARIABLE_TOKEN = 3
    MUTABLE_TOKEN = 4
    END_OF_INSTRUCTION = 5
    BLOCK_BEGIN = 6
    BLOCK_END = 7
    NESTED_EXPR_BEGIN = 8
    NESTED_EXPR_END = 9
    BIN_OPERATION_TOKEN = 10
    RETURN_DECL = 11
    WITH_DECL = 12
    COMMENT_START = 13
    COMMENT = 14
    WS = 15
    NEW_LINE = 16
    NAME = 17
    NAME_start = 18
    NAME_continue = 19
    NUMBER = 20
    NUMBER_SIGN = 21
    DIGIT = 22
    INT = 23
    FLOAT = 24
    BOOL = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'func'", "'main'", "'let'", "'mut'", "';'", "'{'", "'}'", "'('", 
            "')'", "'returns'", "'with'", "'//'" ]

    symbolicNames = [ "<INVALID>",
            "FUNC_DECL", "MAIN_FUNC_NAME", "VARIABLE_TOKEN", "MUTABLE_TOKEN", 
            "END_OF_INSTRUCTION", "BLOCK_BEGIN", "BLOCK_END", "NESTED_EXPR_BEGIN", 
            "NESTED_EXPR_END", "BIN_OPERATION_TOKEN", "RETURN_DECL", "WITH_DECL", 
            "COMMENT_START", "COMMENT", "WS", "NEW_LINE", "NAME", "NAME_start", 
            "NAME_continue", "NUMBER", "NUMBER_SIGN", "DIGIT", "INT", "FLOAT", 
            "BOOL" ]

    ruleNames = [ "FUNC_DECL", "MAIN_FUNC_NAME", "VARIABLE_TOKEN", "MUTABLE_TOKEN", 
                  "END_OF_INSTRUCTION", "BLOCK_BEGIN", "BLOCK_END", "NESTED_EXPR_BEGIN", 
                  "NESTED_EXPR_END", "BIN_OPERATION_TOKEN", "RETURN_DECL", 
                  "WITH_DECL", "COMMENT_START", "COMMENT", "WS", "NEW_LINE", 
                  "NAME", "NAME_start", "NAME_continue", "NUMBER", "NUMBER_SIGN", 
                  "DIGIT", "INT", "FLOAT", "BOOL" ]

    grammarFileName = "jj_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


