# Generated from jjLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,1,1,1,5,1,71,8,1,10,1,12,1,74,9,1,1,1,1,1,1,2,4,2,79,8,2,
        11,2,12,2,80,1,2,1,2,1,3,3,3,86,8,3,1,3,1,3,3,3,90,8,3,1,3,3,3,93,
        8,3,1,4,1,4,1,4,3,4,98,8,4,1,5,1,5,1,6,4,6,103,8,6,11,6,12,6,104,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,116,8,7,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,3,20,166,8,20,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,5,29,208,8,29,10,29,12,29,
        211,9,29,1,30,3,30,214,8,30,1,31,1,31,3,31,218,8,31,0,0,32,1,1,3,
        2,5,3,7,4,9,5,11,0,13,0,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,
        13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,
        24,53,25,55,26,57,27,59,28,61,0,63,0,1,0,7,2,0,10,10,12,13,3,0,9,
        10,13,13,32,32,2,0,43,43,45,45,3,0,37,37,42,42,47,47,2,0,60,60,62,
        62,3,0,65,90,95,95,97,122,1,0,48,57,231,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
        49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
        59,1,0,0,0,1,65,1,0,0,0,3,68,1,0,0,0,5,78,1,0,0,0,7,89,1,0,0,0,9,
        94,1,0,0,0,11,99,1,0,0,0,13,102,1,0,0,0,15,115,1,0,0,0,17,117,1,
        0,0,0,19,122,1,0,0,0,21,127,1,0,0,0,23,131,1,0,0,0,25,135,1,0,0,
        0,27,137,1,0,0,0,29,139,1,0,0,0,31,141,1,0,0,0,33,143,1,0,0,0,35,
        145,1,0,0,0,37,147,1,0,0,0,39,149,1,0,0,0,41,165,1,0,0,0,43,167,
        1,0,0,0,45,169,1,0,0,0,47,177,1,0,0,0,49,182,1,0,0,0,51,187,1,0,
        0,0,53,190,1,0,0,0,55,195,1,0,0,0,57,201,1,0,0,0,59,205,1,0,0,0,
        61,213,1,0,0,0,63,217,1,0,0,0,65,66,5,47,0,0,66,67,5,47,0,0,67,2,
        1,0,0,0,68,72,3,1,0,0,69,71,8,0,0,0,70,69,1,0,0,0,71,74,1,0,0,0,
        72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,76,3,
        7,3,0,76,4,1,0,0,0,77,79,7,1,0,0,78,77,1,0,0,0,79,80,1,0,0,0,80,
        78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,6,2,0,0,83,6,1,0,0,
        0,84,86,5,13,0,0,85,84,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,90,
        5,10,0,0,88,90,2,12,13,0,89,85,1,0,0,0,89,88,1,0,0,0,90,92,1,0,0,
        0,91,93,3,5,2,0,92,91,1,0,0,0,92,93,1,0,0,0,93,8,1,0,0,0,94,97,3,
        13,6,0,95,96,5,46,0,0,96,98,3,13,6,0,97,95,1,0,0,0,97,98,1,0,0,0,
        98,10,1,0,0,0,99,100,2,48,57,0,100,12,1,0,0,0,101,103,3,11,5,0,102,
        101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,
        14,1,0,0,0,106,107,5,116,0,0,107,108,5,114,0,0,108,109,5,117,0,0,
        109,116,5,101,0,0,110,111,5,102,0,0,111,112,5,97,0,0,112,113,5,108,
        0,0,113,114,5,115,0,0,114,116,5,101,0,0,115,106,1,0,0,0,115,110,
        1,0,0,0,116,16,1,0,0,0,117,118,5,102,0,0,118,119,5,117,0,0,119,120,
        5,110,0,0,120,121,5,99,0,0,121,18,1,0,0,0,122,123,5,109,0,0,123,
        124,5,97,0,0,124,125,5,105,0,0,125,126,5,110,0,0,126,20,1,0,0,0,
        127,128,5,108,0,0,128,129,5,101,0,0,129,130,5,116,0,0,130,22,1,0,
        0,0,131,132,5,109,0,0,132,133,5,117,0,0,133,134,5,116,0,0,134,24,
        1,0,0,0,135,136,5,59,0,0,136,26,1,0,0,0,137,138,5,44,0,0,138,28,
        1,0,0,0,139,140,5,123,0,0,140,30,1,0,0,0,141,142,5,125,0,0,142,32,
        1,0,0,0,143,144,5,40,0,0,144,34,1,0,0,0,145,146,5,41,0,0,146,36,
        1,0,0,0,147,148,7,2,0,0,148,38,1,0,0,0,149,150,5,33,0,0,150,40,1,
        0,0,0,151,166,7,3,0,0,152,153,5,61,0,0,153,166,5,61,0,0,154,155,
        5,33,0,0,155,166,5,61,0,0,156,166,7,4,0,0,157,158,5,60,0,0,158,166,
        5,61,0,0,159,160,5,62,0,0,160,166,5,61,0,0,161,162,5,124,0,0,162,
        166,5,124,0,0,163,164,5,38,0,0,164,166,5,38,0,0,165,151,1,0,0,0,
        165,152,1,0,0,0,165,154,1,0,0,0,165,156,1,0,0,0,165,157,1,0,0,0,
        165,159,1,0,0,0,165,161,1,0,0,0,165,163,1,0,0,0,166,42,1,0,0,0,167,
        168,5,61,0,0,168,44,1,0,0,0,169,170,5,114,0,0,170,171,5,101,0,0,
        171,172,5,116,0,0,172,173,5,117,0,0,173,174,5,114,0,0,174,175,5,
        110,0,0,175,176,5,115,0,0,176,46,1,0,0,0,177,178,5,119,0,0,178,179,
        5,105,0,0,179,180,5,116,0,0,180,181,5,104,0,0,181,48,1,0,0,0,182,
        183,5,119,0,0,183,184,5,104,0,0,184,185,5,101,0,0,185,186,5,110,
        0,0,186,50,1,0,0,0,187,188,5,105,0,0,188,189,5,102,0,0,189,52,1,
        0,0,0,190,191,5,101,0,0,191,192,5,108,0,0,192,193,5,115,0,0,193,
        194,5,101,0,0,194,54,1,0,0,0,195,196,5,119,0,0,196,197,5,104,0,0,
        197,198,5,105,0,0,198,199,5,108,0,0,199,200,5,101,0,0,200,56,1,0,
        0,0,201,202,5,102,0,0,202,203,5,111,0,0,203,204,5,114,0,0,204,58,
        1,0,0,0,205,209,3,61,30,0,206,208,3,63,31,0,207,206,1,0,0,0,208,
        211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,60,1,0,0,0,211,209,
        1,0,0,0,212,214,7,5,0,0,213,212,1,0,0,0,214,62,1,0,0,0,215,218,3,
        61,30,0,216,218,7,6,0,0,217,215,1,0,0,0,217,216,1,0,0,0,218,64,1,
        0,0,0,13,0,72,80,85,89,92,97,104,115,165,209,213,217,1,6,0,0
    ]

class jjLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT_START = 1
    COMMENT = 2
    WS = 3
    NEW_LINE = 4
    NUMBER_TYPE = 5
    BOOL = 6
    FUNC_DECL = 7
    MAIN_FUNC_NAME = 8
    VARIABLE_TOKEN = 9
    MUTABLE_TOKEN = 10
    END_OF_INSTRUCTION = 11
    COMMA_TOKEN = 12
    BLOCK_BEGIN = 13
    BLOCK_END = 14
    PARENTHESES_BEGIN = 15
    PARENTHESES_END = 16
    UNARY_OR_BINARY_OPERATIONS = 17
    ONLY_UNARY_OPERATIONS = 18
    ONLY_BINARY_OPERATIONS = 19
    ASSIGNMENT_TOKEN = 20
    RETURN_DECL = 21
    WITH_DECL = 22
    WHEN_DECL = 23
    IF_DECL = 24
    ELSE_DECL = 25
    WHILE_DECL = 26
    FOR_DECL = 27
    NAME = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'//'", "'func'", "'main'", "'let'", "'mut'", "';'", "','", 
            "'{'", "'}'", "'('", "')'", "'!'", "'='", "'returns'", "'with'", 
            "'when'", "'if'", "'else'", "'while'", "'for'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT_START", "COMMENT", "WS", "NEW_LINE", "NUMBER_TYPE", 
            "BOOL", "FUNC_DECL", "MAIN_FUNC_NAME", "VARIABLE_TOKEN", "MUTABLE_TOKEN", 
            "END_OF_INSTRUCTION", "COMMA_TOKEN", "BLOCK_BEGIN", "BLOCK_END", 
            "PARENTHESES_BEGIN", "PARENTHESES_END", "UNARY_OR_BINARY_OPERATIONS", 
            "ONLY_UNARY_OPERATIONS", "ONLY_BINARY_OPERATIONS", "ASSIGNMENT_TOKEN", 
            "RETURN_DECL", "WITH_DECL", "WHEN_DECL", "IF_DECL", "ELSE_DECL", 
            "WHILE_DECL", "FOR_DECL", "NAME" ]

    ruleNames = [ "COMMENT_START", "COMMENT", "WS", "NEW_LINE", "NUMBER_TYPE", 
                  "DIGIT", "INT", "BOOL", "FUNC_DECL", "MAIN_FUNC_NAME", 
                  "VARIABLE_TOKEN", "MUTABLE_TOKEN", "END_OF_INSTRUCTION", 
                  "COMMA_TOKEN", "BLOCK_BEGIN", "BLOCK_END", "PARENTHESES_BEGIN", 
                  "PARENTHESES_END", "UNARY_OR_BINARY_OPERATIONS", "ONLY_UNARY_OPERATIONS", 
                  "ONLY_BINARY_OPERATIONS", "ASSIGNMENT_TOKEN", "RETURN_DECL", 
                  "WITH_DECL", "WHEN_DECL", "IF_DECL", "ELSE_DECL", "WHILE_DECL", 
                  "FOR_DECL", "NAME", "NAME_start", "NAME_continue" ]

    grammarFileName = "jjLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


